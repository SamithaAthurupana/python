# OOP stands for Object-Oriented Programming.
# Python is an object-oriented language, allowing you to structure your code using classes and objects for better organization and reusability.
#
# Advantages of OOP
#   * Provides a clear structure to programs
#   * Makes code easier to maintain, reuse, and debug
#   * Helps keep your code DRY (Don't Repeat Yourself)
#
#  Class	Objects
#  Fruit	Apple, Banana, Mango
#  Car	    Volvo, Audi, Toyota
#
# Python Classes/Objects
#   * Python is an object oriented programming language.
#   * Almost everything in Python is an object, with its properties and methods.
#   * A Class is like an object constructor, or a "blueprint" for creating objects.
#
# Create a Class
# class MyClass:
#   x = 5
#
# call object in class -------------- as we call append in list
# class MyClass:
#   x = 5
# print(MyClass.x)
#
# Create Object
# Now we can use the class named MyClass to create objects:
# Create an object named p1, and print the value of x:
# p1 = MyClass()
# print(p1.x)
#
# make a class and get values in to objects.
#   * First we need to make def and instance name and add parameters
#   * Next make a object and assign values after the class name in parentheses.
#   * After that we can call it.

# class Person:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
# person_one = Person("samitha", 23)
# print(f"we have a person, his name {person_one.name} and his age is {person_one.age}")

# __init__() ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö ‡∂∏‡∑ú‡∂ö‡∂ö‡∑ä‡∂Ø?
# __init__() ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö Python classes ‡∑Ä‡∂Ω constructor method ‡∂ë‡∂ö.
# Object ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑Ä‡∂≠‡∑ô‡∂±‡∑ä ‡∑É‡∑è‡∂Ø‡∑è‡∂ú‡∂±‡∑ä‡∂± ‡∑Ä‡∑í‡∂ß (new object create ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß) automatic ‡∂Ω‡∑ô‡∑É ‡∂ö‡∑ê‡∂≥‡∑Ä‡∑ô‡∂± method ‡∂ë‡∂ö.
# ‡∂∏‡∑ö‡∂ö‡∑ô primary ‡∂∑‡∑ñ‡∂∏‡∑í‡∂ö‡∑è‡∑Ä ‡∂≠‡∂∏‡∂∫‡∑í object ‡∂ë‡∂ö initialize ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (object ‡∂ë‡∂ö‡∑ö attribute ‡∑Ä‡∂Ω‡∂ß values ‡∂Ø‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏).

# üîπ ‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä ‡∂ö‡∂ª‡∑î‡∂´‡∑î
# __init__() constructor ‚Üí object ‡∂ë‡∂ö create ‡∑Ä‡∑ô‡∂± ‡∑Ä‡∑ô‡∂Ω‡∑è‡∑Ä‡∑ö run ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è.
# self ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö object ‡∂ë‡∂ö‡∑ö‡∂∏ reference (object ‡∂ë‡∂ö ‡∂≠‡∑î‡∂Ω attribute ‡∂ë‡∂ö‡∂ö‡∑ä access ‡∂ö‡∂ª‡∂±‡∑ä‡∂±).
# Class ‡∂ë‡∂ö‡∑ö‡∂Ø‡∑ì object ‡∂ë‡∂ö‡∑ö attributes (‡∂Ø‡∂≠‡∑ä‡∂≠) initialize ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∏‡∑ô‡∂∫ mostly ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è.

# class Person:
#     def __init__(self, name, age):
#         # ‡∂∏‡∑ö‡∂ö‡∑ô‡∂±‡∑ä object ‡∂ë‡∂ö‡∑ö attributes initialize ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
#         self.name = name
#         self.age = age
#
#     def __str__(self):
#         return f"{self.name} ‡∂ú‡∑ö ‡∑Ä‡∂∫‡∑É {self.age}‡∂∫‡∑í."
#
# # ‡∂±‡∑Ä object ‡∂ë‡∂ö‡∂ö‡∑ä create ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß __init__() auto run ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è
# p1 = Person("‡∂Ö‡∂±‡∑î‡∑Ç‡∑è", 22)
# p2 = Person("‡∂Ø‡∑í‡∂±‡∑ñ‡∑Ç‡∑è", 30)
#
# print(p1)
# print(p2)

# __str__() ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂±‡∑ö ‡∂∏‡∑ú‡∂ö‡∂ö‡∑ä‡∂Ø?
# Python ‡∂ë‡∂ö‡∑ö special method (dunder method) ‡∂ë‡∂ö‡∂ö‡∑ä.
# print() function ‡∂ë‡∂ö ‡∑Ñ‡∑ù str() function ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä object ‡∂ë‡∂ö print ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß, ‡∂Ö‡∂∫‡∑ô‡∂ö‡∑î‡∂ß ‡∂ö‡∑í‡∂∫‡∑Ä‡∂±‡∑ä‡∂± ‡∂Ω‡∑ö‡∑É‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ô‡∂±‡∑ô‡∂± string ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ö.
# __str__() method ‡∂ë‡∂ö‡∂ö‡∑ä define ‡∂ö‡∂ª‡∂Ω‡∑è ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, Python ‡∂ë‡∂ö object ‡∂ë‡∂ö print ‡∂ö‡∂ª‡∂Ø‡∑ä‡∂Ø‡∑ì ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂∏ ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í:
# <__main__.ClassName object at 0x000001A23B4C>

# class Person:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     # __str__() define ‡∂ö‡∂ª‡∂Ω‡∑è
#     def __str__(self):
#         return f"{self.name} ‡∂ú‡∑ö ‡∑Ä‡∂∫‡∑É {self.age}‡∂∫‡∑í."
#
# p1 = Person("‡∂ö‡∑Ä‡∑í‡∂±‡∑ä", 25)
#
# print(p1)  # __str__() t·ª±Âä® ‡∂Ω‡∑ô‡∑É ‡∂ö‡∑ê‡∂≥‡∑Ä‡∂∫‡∑í
# print(str(p1))  # str() function ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∑Ñ‡∑ù ‡∂ö‡∑ê‡∂≥‡∑Ä‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä

# Object creating
class Person:
  def __init__(self, name, age):            # constructor (object ‡∂ë‡∂ö ‡∑Ñ‡∂Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡∂Ω‡∂∏ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ô‡∂± ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç method ‡∂ë‡∂ö)
    self.name = name                        # object ‡∂ë‡∂ö‡∑ö (instance ‡∂ë‡∂ö‡∑ö) name ‡∂ö‡∑í‡∂∫‡∂± ‡∂ú‡∑î‡∂´‡∑è‡∂Ç‡∂ú‡∂∫ ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    self.age = age                          # object ‡∂ë‡∂ö‡∑ö age ‡∂ú‡∑î‡∂´‡∑è‡∂Ç‡∂ú‡∂∫ ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è

  def myfunc(self):                         # class ‡∂ë‡∂ö ‡∂≠‡∑î‡∑Ö ‡∂á‡∂≠‡∑í method ‡∂ë‡∂ö‡∂ö‡∑ä
    print("Hello my name is " + self.name)  # self.name ‡∑Ä‡∂Ω ‡∂≠‡∑í‡∂∫‡∑ô‡∂± ‡∂Ö‡∂ú‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∑í‡∂±‡∑ä‡∂ß‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è

p1 = Person("John", 36)          # Person class ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä p1 ‡∂ö‡∑í‡∂∫‡∂± object ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑è‡∂Ø‡∂±‡∑Ä‡∑è
p1.myfunc()                                 # p1 object ‡∂ë‡∂ö‡∑ö myfunc() method ‡∂ë‡∂ö ‡∂ö‡∑ê‡∂≥‡∑Ä‡∂±‡∑Ä‡∑è

# class Person:
#   def __init__(mysillyobject, name, age):
#     mysillyobject.name = name
#     mysillyobject.age = age
#
#   def myfunc(abc):
#     print("Hello my name is " + abc.name)
#
# p1 = Person("John", 36)
# p1.myfunc()  # Output: Hello my name is John

# Modify Object Properties ------------
# You can modify properties on objects like this:
# Example
# Set the age of p1 to 40:
# p1.age = 40

# Modify Object Properties ------------
# You can modify properties on objects like this:
# Example
# Set the age of p1 to 40:
# p1.age = 40

# Delete Objects
# You can delete objects by using the del keyword:
# Example
# Delete the p1 object:
# del p1

# The pass Statement
# class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error.
# Example
# class Person:
#   pass

# Inheritance ------------------------
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

x = Student("Mike", "Olsen")
print(x.graduationyear)

# ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫‡∑ô‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∑ö Person class ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂ã‡∂ª‡∑î‡∂∏ ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±‡∑è (inherit) Student class ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑è‡∂Ø‡∂Ω‡∑è, super() ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫‡∑ô‡∂±‡∑ä parent class ‡∂ë‡∂ö‡∑ö init ‡∂ö‡∑ê‡∂≥‡∑Ä‡∑è attributes ‡∑É‡∑ê‡∂∏‡∂ª‡∑í‡∂≠‡∑í‡∂± ‡∂Ω‡∑ô‡∑É ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂∫‡∑í.
# ‡∂ö‡∑ö‡∂≠‡∂∫‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫:
# Person:
# init(self, fname, lname): firstname ‡∑É‡∑Ñ lastname set ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.
# printname(self): ‡∂±‡∑è‡∂∏‡∂∫ print ‡∂ö‡∂ª‡∂± method ‡∂ë‡∂ö.
# Student(Person):
# Person ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂ã‡∂ª‡∑î‡∂∏ ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è.
# init(self, fname, lname):
# super().init(fname, lname) ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è parent (Person) ‡∂ë‡∂ö‡∑ö init ‡∂ö‡∑ê‡∂≥‡∑Ä‡∂Ω‡∑è firstname/lastname set ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è.
# self.graduationyear = 2019 ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂Ö‡∂∏‡∂≠‡∂ª attribute ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂±‡∑ä‡∂±‡∑è.
# ‡∂∞‡∑è‡∑Ä‡∂ö‡∂∫:
#
# x = Student("Mike", "Olsen")
# print(x.graduationyear) ‚Üí 2019
# ‡∂Ö‡∂∏‡∂≠‡∂ª‡∑Ä, Student object ‡∂ë‡∂ö‡∂ß Person ‡∂ë‡∂ö‡∑ö method ‡∂ë‡∂ö‡∂≠‡∑ä ‡∂≠‡∑í‡∂∂‡∑ô‡∂± ‡∂±‡∑í‡∑É‡∑è: