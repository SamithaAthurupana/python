from dataclasses import dataclass
from typing import List
from model import Product, OrderItem, Order, Customer, SuperMarkerError

from repository import OrderRepository, ProductRepository, CustomerRepository
# repositories (storage layer interfaces) import


# SERVICE CLASS ----------------
@dataclass
class SuperMarketService:
    # üîë Repository objects store ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    # (Dependency Injection ‚Üí DB connect ‡∑Ä‡∑ô‡∂±‡∑Ä‡∂ß instead memory repos ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä)
    product: ProductRepository
    customer: CustomerRepository
    order: OrderRepository

    # Product ------------------
    def add_product(self, product_id: str, name: str, price: float, quantity: int) -> Product:

        if self.product.get_product_by_id(product_id) is not None: # check product_id, is duplicate?
            raise SuperMarkerError("Product already exists")
        if quantity < 0:      # ‚úÖ validation: stock quantity negative ‡∂±‡∑ú‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í
            raise SuperMarkerError("Quantity cannot be less than zero")
        if price < 0:         # ‚úÖ validation: price negative ‡∂±‡∑ú‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í
            raise SuperMarkerError("Price cannot be less than zero")


        product = Product(product_id, name, price, quantity) # ‚úÖ create Product object
        self.product.add(product) # ‚úÖ save repository
        return product

    def get_all_available_products(self) -> List[Product]:
        return [p for p in self.product.list_all() if p.is_available()]  # ‚úÖ p.is_available() == True

    def get_products(self) -> List[Product]:
        return self.product.list_all()

    # Customer ------------------
    def add_customer(self, customer_id: str, name: str, email: str, contact: str) -> Customer:
        if self.customer.get_customer_by_id(customer_id) is not None: # ‚úÖ duplicate customer check
            raise SuperMarkerError("Customer already exists")

        customer = Customer(customer_id, name, email, contact) # ‚úÖ Customer object ‡∂ë‡∂ö create ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        # ‚úÖ save ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        self.customer.add(customer)
        return customer

    def get_all_customers(self) -> List[Customer]:
        """‡∂â‡∂±‡∑ä‡∂± customers ‡∑Ñ‡∑ê‡∂∏ ‡∂ë‡∂ö‡∂∏ return ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è"""
        return self.customer.list_all()

    # ------------------ Order ------------------
    def add_order(self, order_id: str, customer_id: str) -> Order:
        """‡∂±‡∑Ä order ‡∂ë‡∂ö‡∂ö‡∑ä customer ‡∂ë‡∂ö‡∂ö‡∂ß create ‡∂ö‡∂ª‡∂± method ‡∂ë‡∂ö"""

        # ‚úÖ duplicate order check ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        if self.order.get_order_by_id(order_id) is not None:
            raise SuperMarkerError("Order already exists")

        # ‚úÖ customer ‡∂ë‡∂ö exist ‡∂Ø ‡∂∂‡∂Ω‡∂±‡∑Ä‡∑è
        cust = self.customer.get_customer_by_id(customer_id)
        if cust is None:
            raise SuperMarkerError("Customer doesn't exist")

        # ‚úÖ ‡∂±‡∑Ä order ‡∂ë‡∂ö create ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (customer name attach ‡∂ö‡∂ª‡∂Ω‡∑è)
        order = Order(order_id, customer_id, customer_name=cust.name)
        # ‚úÖ save ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        self.order.add(order)
        return order

    def add_item_to_order(self, order_id: str, product_id: str, quantity: int) -> None:
        """‡∂ë‡∂ö order ‡∂ë‡∂ö‡∂ö‡∂ß product ‡∂ë‡∂ö‡∂ö‡∑ä add ‡∂ö‡∂ª‡∂± method ‡∂ë‡∂ö"""

        # ‚úÖ order ‡∂ë‡∂ö retrieve ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        order = self.order.get_order_by_id(order_id)
        # ‚úÖ product ‡∂ë‡∂ö retrieve ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        product = self.product.get_product_by_id(product_id)

        # Validation checks
        if order is None:
            raise SuperMarkerError("Order doesn't exist")
        if product is None:
            raise SuperMarkerError("Product doesn't exist")

        # ‚úÖ stock check
        if product.quantity < quantity:
            raise SuperMarkerError(f"Not enough {product.name} left")

        # ‚úÖ OrderItem ‡∂ë‡∂ö create ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        order_item = OrderItem(product_id, product.name, quantity, product.price)

        # ‚úÖ order class ‡∂ë‡∂ö‡∑ö add_item() ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∂Ø ‡∂∂‡∂Ω‡∂±‡∑Ä‡∑è
        if hasattr(order, "add_item"):
            order.add_item(order_item)   # custom method call
        else:
            order.items.append(order_item)   # direct append

        # ‚úÖ product stock ‡∂ë‡∂ö reduce ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        product.reduce_quantity(quantity)
        # ‚úÖ updated product save ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        self.product.update(product)

        # ‚úÖ updated order save ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        self.order.update(order)
